Question 1

a. Answer: People from Ontario tend to put larger purchases on credit card payment.


b. Query:

SELECT paymentmethods.mtype, AVG(purchases.amount) from customersLEFT JOIN purchases ON customers.custid = purchases.custid LEFT JOIN paymentmethods ON paymentmethods.pmid = purchases.pmidWHERE province = 'ON'GROUP BY paymentmethods.mtype;Result:

mtype	avgcredit	131.40debit	101.06Question 2

a. Answer: Visitors from outside BC spent the most per transaction.


b. Query to create the view:

CREATE OR REPLACE VIEW vancouver_custs AS
WITH 
  vprefixes (vp) AS 
    (SELECT DISTINCT pcprefix FROM greater_vancouver_prefixes)
SELECT custid,  
       case when vp is not null then 1
       else 0 end AS in_vancouver
from customers LEFT JOIN vprefixes ON SUBSTRING(customers.postalcode,1,3) = vprefixes.vp;



c. Query used to support answer:

SELECT From_BC_non_Van, From_Van, count(1) AS Count, AVG(amount) AS Average, median(amount) AS Median
From
(SELECT
case when customers.province = 'BC' and in_vancouver = 0 then true else false end AS From_BC_non_Van,
case when in_vancouver = 1 then true else false end AS From_Van,
amount
FROM purchases LEFT JOIN customers ON purchases.custid = customers.custid left join vancouver_custs ON purchases.custid = vancouver_custs.custid)

group by From_BC_non_Van, From_Van
order by Median;


Results:

from_bc_non_van	from_van	 count	average	median

false		true	 10384	86.01	27.370
true		false	 3899	95.16	30.080
false		false	 15717	112.89	33.270



Question 3

a. Answer: Tourists spend more at restaurants that serve sushi.


b. Query:

WITH sushi AS (select amenid from amenities where amenity = 'restaurant' and tags.cuisine ILIKE '%sushi%')

select avg(amount) AS avg, in_vancouver from
purchases inner join sushi on purchases.amenid = sushi.amenid
inner join vancouver_custs on vancouver_custs.custid = purchases.custid
group by in_vancouver
order by in_vancouver;

Results:

avg	in_vancouver
85.80	0
77.57	1



Question 4

a. Answer: The average purchase per day for the first five days of August:

pdate	         avg

2021-08-01	96.59
2021-08-02	106.56
2021-08-03	95.87
2021-08-04	115.50
2021-08-05	95.67


b. Query:

select pdate, avg(amount) AS avg from purchases 
where datepart(day, pdate) in (1,2,3,4,5) and datepart(month, pdate)= 8 
group by pdate 
order by pdatec. What was the bytes / record ratio for Redshift on the 5-day query?
94.06 KB * 1024 / 4703 rows = 96317.44 bytes / 4703 = 20.48

d. What was the bytes / record ratio for Spectrum on the 5-day query?
267396 bytes / 4703 = 56.86

e. The bytes/record ratio for Spectrum is about 57, which means that Spectrum scans all the row of table whereas Redshift only scans the columns that needed for the query.


f. Relatively small datasets that need to be queried regularly are well-suited to loading from S3 into Redshift before querying it.


g. Relatively large datasets that does not need to be queried regularly are well-suited to retaining in S3 and querying it using Spectrum



